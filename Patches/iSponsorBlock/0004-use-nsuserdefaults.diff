diff -urN iSponsorBlock/SponsorBlockSettingsController.h iSponsorBlock+useNSUserDefaults/SponsorBlockSettingsController.h
--- iSponsorBlock/SponsorBlockSettingsController.h	2022-03-16 22:00:13.749256501 +0700
+++ iSponsorBlock+useNSUserDefaults/SponsorBlockSettingsController.h	2022-03-16 21:17:14.620862403 +0700
@@ -42,10 +42,7 @@
 @interface SponsorBlockSettingsController : UIViewController <UITableViewDelegate, UITableViewDataSource, UITextFieldDelegate>
 @property (strong, nonatomic) UITableView *tableView;
 @property (strong, nonatomic) NSArray *sectionTitles;
-@property (strong, nonatomic) NSMutableDictionary *settings;
-@property (strong, nonatomic) NSString *settingsPath;
 -(void)enabledSwitchToggled:(UISwitch *)sender;
 -(void)switchToggled:(UISwitch *)sender;
 -(void)categorySegmentSelected:(UISegmentedControl *)segmentedControl;
--(void)writeSettings:(NSDictionary *)settings;
 @end
diff -urN iSponsorBlock/SponsorBlockSettingsController.m iSponsorBlock+useNSUserDefaults/SponsorBlockSettingsController.m
--- iSponsorBlock/SponsorBlockSettingsController.m	2022-03-16 21:16:54.747970082 +0700
+++ iSponsorBlock+useNSUserDefaults/SponsorBlockSettingsController.m	2022-03-17 06:31:09.083898941 +0700
@@ -5,17 +5,11 @@
 -(void)colorPicker:(id)colorPicker didSelectColor:(UIColor *)color {
     self.colorWell.color = color;
     NSString *hexString = hexFromUIColor(color);
-    
-    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
-    NSString *documentsDirectory = [paths objectAtIndex:0];
-    NSString *settingsPath = [documentsDirectory stringByAppendingPathComponent:@"iSponsorBlock.plist"];
-    NSMutableDictionary *settings = [NSMutableDictionary dictionary];
-    [settings addEntriesFromDictionary:[NSDictionary dictionaryWithContentsOfFile:settingsPath]];
-    NSDictionary *categorySettings = [settings objectForKey:@"categorySettings"];
+    NSMutableDictionary *categorySettings = [[[NSUserDefaults standardUserDefaults] dictionaryForKey:@"kSponsorBlockCategorySettings"] mutableCopy];
     
     [categorySettings setValue:hexString forKey:[NSString stringWithFormat:@"%@Color", self.category]];
-    [settings setValue:categorySettings forKey:@"categorySettings"];
-    [settings writeToURL:[NSURL fileURLWithPath:settingsPath isDirectory:NO] error:nil];
+    [[NSUserDefaults standardUserDefaults] setObject:categorySettings forKey:@"kSponsorBlockCategorySettings"];
+    [[NSUserDefaults standardUserDefaults] synchronize];
     CFNotificationCenterPostNotification(CFNotificationCenterGetDarwinNotifyCenter(), CFSTR("com.galacticdev.isponsorblockprefs.changed"), NULL, NULL, YES);
 }
 -(void)presentColorPicker:(UITableViewCell *)sender {
@@ -39,12 +33,6 @@
 -(void)viewDidLoad {
     [super viewDidLoad];
     
-    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
-    NSString *documentsDirectory = [paths objectAtIndex:0];
-    self.settingsPath = [documentsDirectory stringByAppendingPathComponent:@"iSponsorBlock.plist"];
-    self.settings = [NSMutableDictionary dictionary];
-    [self.settings addEntriesFromDictionary:[NSDictionary dictionaryWithContentsOfFile:self.settingsPath]];
-    
     self.view.backgroundColor = UIColor.systemBackgroundColor;
     
     //detects if device is an se gen 1 or not, crude fix for text getting cut off
@@ -114,8 +102,8 @@
         UISwitch *enabledSwitch = [[UISwitch alloc] initWithFrame:CGRectMake(0,0,51,31)];
         cell.accessoryView = enabledSwitch;
         [enabledSwitch addTarget:self action:@selector(enabledSwitchToggled:) forControlEvents:UIControlEventValueChanged];
-        if([self.settings valueForKey:@"enabled"]) {
-            [enabledSwitch setOn:[[self.settings valueForKey:@"enabled"] boolValue] animated:NO];
+        if([[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockEnabled"]) {
+            [enabledSwitch setOn:[[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockEnabled"] animated:NO];
         }
         else {
             [enabledSwitch setOn:YES animated:NO];
@@ -125,7 +113,7 @@
     }
     if(indexPath.section <= 6) {
         SponsorBlockTableCell *tableCell = [[SponsorBlockTableCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"SponsorBlockCell2"];
-        NSDictionary *categorySettings = [self.settings objectForKey:@"categorySettings"];
+        NSDictionary *categorySettings = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"kSponsorBlockCategorySettings"] ;
         UISegmentedControl *segmentedControl = [[UISegmentedControl alloc] initWithItems:@[@"Disable", @"Auto Skip", @"Show in Seek Bar", @"Manual Skip"]];
         
         //make it so "Show in Seek Bar" text won't be cut off on certain devices
@@ -188,7 +176,7 @@
         UITableViewCell *textCell = [[UITableViewCell alloc] initWithStyle:1000 reuseIdentifier:@"SponsorBlockTextCell"];
         textCell.textLabel.text = @"Set Minimum Segment Duration:";
         textCell.textLabel.adjustsFontSizeToFitWidth = YES;
-        [textCell editableTextField].text = [NSString stringWithFormat:@"%.1f", [[self.settings valueForKey:@"minimumDuration"] floatValue]];
+        [textCell editableTextField].text = [NSString stringWithFormat:@"%.1f", [[NSUserDefaults standardUserDefaults] floatForKey:@"kSponsorBlockMinimumDuration"]];
         [textCell editableTextField].keyboardType = UIKeyboardTypeDecimalPad;
         [textCell editableTextField].delegate = self;
         return textCell;
@@ -197,23 +185,23 @@
         UITableViewCell *textCell = [[UITableViewCell alloc] initWithStyle:1000 reuseIdentifier:@"SponsorBlockTextCell"];
         textCell.textLabel.text = @"Set How Long Skip Notice Will Appear:";
         textCell.textLabel.adjustsFontSizeToFitWidth = YES;
-        [textCell editableTextField].text = [NSString stringWithFormat:@"%.1f", [[self.settings valueForKey:@"skipNoticeDuration"] floatValue]];
+        [textCell editableTextField].text = [NSString stringWithFormat:@"%.1f", [[NSUserDefaults standardUserDefaults] floatForKey:@"kSponsorBlockSkipNoticeDuration"]];
         [textCell editableTextField].keyboardType = UIKeyboardTypeDecimalPad;
         [textCell editableTextField].delegate = self;
         return textCell;
     }
     else if(indexPath.section >= 9 && indexPath.section < 13) {
         NSArray *titles = @[@"Show Skip Notice", @"Show iSponsorBlock Buttons in Video Player", @"Show Modified Time in Seek Bar", @"Enable Skip Count Tracking"];
-        NSArray *titlesNames = @[@"showSkipNotice", @"showButtonsInPlayer", @"showModifiedTime", @"enableSkipCountTracking"];
+        NSArray *titlesNames = @[@"kSponsorBlockShowSkipNotice", @"kSponsorBlockShowButtonsInPlayer", @"kSponsorBlockShowModifiedTime", @"kSponsorBlockEnableSkipCountTracking"];
         UITableViewCell *tableCell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"SponsorBlockCell3"];
-        tableCell.textLabel.text = titles[indexPath.section-9];
+        tableCell.textLabel.text = titles[indexPath.section-9 % 4];
         tableCell.textLabel.adjustsFontSizeToFitWidth = YES;
 
         UISwitch *toggleSwitch = [[UISwitch alloc] initWithFrame:CGRectMake(0,0,51,31)];
         tableCell.accessoryView = toggleSwitch;
         [toggleSwitch addTarget:self action:@selector(switchToggled:) forControlEvents:UIControlEventValueChanged];
-        if([self.settings valueForKey:titlesNames[indexPath.section-9]]) {
-            [toggleSwitch setOn:[[self.settings valueForKey:titlesNames[indexPath.section-9]] boolValue] animated:NO];
+        if([[NSUserDefaults standardUserDefaults] boolForKey:titlesNames[indexPath.section-9 % 4]]) {
+            [toggleSwitch setOn:[[NSUserDefaults standardUserDefaults] boolForKey:titlesNames[indexPath.section-9 % 4]] animated:NO];
         }
         else {
             [toggleSwitch setOn:YES animated:NO];
@@ -260,24 +248,24 @@
 }
 
 -(void)enabledSwitchToggled:(UISwitch *)sender {
-    [self.settings setValue:@(sender.on) forKey:@"enabled"];
-    [self writeSettings:self.settings];
+    [[NSUserDefaults standardUserDefaults] setBool:[sender isOn] forKey:@"kSponsorBlockEnabled"];
+    [[NSUserDefaults standardUserDefaults] synchronize];
 }
 
 -(void)switchToggled:(UISwitch *)sender {
     UITableViewCell *cell = (UITableViewCell *)sender.superview;
-    NSArray *titlesNames = @[@"showSkipNotice", @"showButtonsInPlayer", @"showModifiedTime", @"enableSkipCountTracking"];
+    NSArray *titlesNames = @[@"kSponsorBlockShowSkipNotice", @"kSponsorBlockShowButtonsInPlayer", @"kSponsorBlockShowModifiedTime", @"kSponsorBlockEnableSkipCountTracking"];
     NSIndexPath *indexPath = [self.tableView indexPathForCell:cell];
-    [self.settings setValue:@(sender.on) forKey:titlesNames[indexPath.section-9]];
-    [self writeSettings:self.settings];
+    [[NSUserDefaults standardUserDefaults] setBool:[sender isOn] forKey:titlesNames[indexPath.section-9]];
+    [[NSUserDefaults standardUserDefaults] synchronize];
 }
 
 -(void)categorySegmentSelected:(UISegmentedControl *)segmentedControl {
-    NSMutableDictionary *categorySettings = [self.settings valueForKey:@"categorySettings"];
+    NSMutableDictionary *categorySettings = [[[NSUserDefaults standardUserDefaults] dictionaryForKey:@"kSponsorBlockCategorySettings"] mutableCopy];
     [categorySettings setValue:@(segmentedControl.selectedSegmentIndex) forKey:[(SponsorBlockTableCell *)segmentedControl.superview.superview category]];
 
-    [self.settings setValue:categorySettings forKey:@"categorySettings"];
-    [self writeSettings:self.settings];
+    [[NSUserDefaults standardUserDefaults] setObject:categorySettings forKey:@"kSponsorBlockCategorySettings"];
+    [[NSUserDefaults standardUserDefaults] synchronize];
 }
 
 -(void)textFieldDidEndEditing:(UITextField *)textField {
@@ -285,17 +273,12 @@
     NSNumberFormatter *f = [[NSNumberFormatter alloc] init];
     f.numberStyle = NSNumberFormatterDecimalStyle;
     if([cell.textLabel.text isEqualToString:@"Set Minimum Segment Duration:"]) {
-        [self.settings setValue:[f numberFromString:textField.text] forKey:@"minimumDuration"];
-        [self writeSettings:self.settings];
+        [[NSUserDefaults standardUserDefaults] setFloat:[f numberFromString:textField.text].floatValue forKey:@"kSponsorBlockMinimumDuration"];
+        [[NSUserDefaults standardUserDefaults] synchronize];
     }
     else {
-        [self.settings setValue:[f numberFromString:textField.text] forKey:@"skipNoticeDuration"];
-        [self writeSettings:self.settings];
+        [[NSUserDefaults standardUserDefaults] setFloat:[f numberFromString:textField.text].floatValue forKey:@"kSponsorBlockSkipNoticeDuration"];
+        [[NSUserDefaults standardUserDefaults] synchronize];
     }
 }
-
--(void)writeSettings:(NSDictionary *)settings {
-    [settings writeToURL:[NSURL fileURLWithPath:self.settingsPath isDirectory:NO] error:nil];
-    CFNotificationCenterPostNotification(CFNotificationCenterGetDarwinNotifyCenter(), CFSTR("com.galacticdev.isponsorblockprefs.changed"), NULL, NULL, YES);
-}
 @end
diff -urN iSponsorBlock/SponsorBlockViewController.m iSponsorBlock+useNSUserDefaults/SponsorBlockViewController.m
--- iSponsorBlock/SponsorBlockViewController.m	2022-03-10 19:02:14.734173788 +0700
+++ iSponsorBlock+useNSUserDefaults/SponsorBlockViewController.m	2022-03-16 21:44:49.297545968 +0700
@@ -183,14 +183,8 @@
     else {
         [kWhitelistedChannels removeObject:self.playerViewController.channelID];
     }
-    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
-    NSString *documentsDirectory = [paths objectAtIndex:0];
-    NSString *settingsPath = [documentsDirectory stringByAppendingPathComponent:@"iSponsorBlock.plist"];
-    NSMutableDictionary *settings = [NSMutableDictionary dictionary];
-    [settings addEntriesFromDictionary:[NSDictionary dictionaryWithContentsOfFile:settingsPath]];
-    
-    [settings setValue:kWhitelistedChannels forKey:@"whitelistedChannels"];
-    [settings writeToURL:[NSURL fileURLWithPath:settingsPath isDirectory:NO] error:nil];
+    [[NSUserDefaults standardUserDefaults] setObject:kWhitelistedChannels forKey:@"kSponsorBlockWhitelistedChannels"];
+    [[NSUserDefaults standardUserDefaults] synchronize];
     CFNotificationCenterPostNotification(CFNotificationCenterGetDarwinNotifyCenter(), CFSTR("com.galacticdev.isponsorblockprefs.changed"), NULL, NULL, YES);
 }
 
@@ -264,13 +258,6 @@
                         configurationForMenuAtLocation:(CGPoint)location {
     SponsorSegmentView *sponsorSegmentView = interaction.view;
     
-    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
-    NSString *documentsDirectory = [paths objectAtIndex:0];
-    NSString *path = [documentsDirectory stringByAppendingPathComponent:@"iSponsorBlock.plist"];
-    NSMutableDictionary *settings = [NSMutableDictionary dictionary];
-    [settings addEntriesFromDictionary:[NSDictionary dictionaryWithContentsOfFile:path]];
-    
-    
     UIContextMenuConfiguration *config = [UIContextMenuConfiguration configurationWithIdentifier:nil
     previewProvider:nil
     actionProvider:^UIMenu* _Nullable(NSArray<UIMenuElement*>* _Nonnull suggestedActions) {
@@ -281,7 +268,7 @@
                 [self setupViews];
                 return;
             }
-            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[settings objectForKey:@"userID"] category:@"sponsor" withViewController:self];
+            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[[NSUserDefaults standardUserDefaults] stringForKey:@"kSponsorBlockUserID"] category:@"sponsor" withViewController:self];
         }]];
         
         [categoryActions addObject:[UIAction actionWithTitle:@"Intermission/Intro Animation" image:nil identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
@@ -290,7 +277,7 @@
                 [self setupViews];
                 return;
             }
-            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[settings objectForKey:@"userID"] category:@"intro" withViewController:self];
+            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[[NSUserDefaults standardUserDefaults] stringForKey:@"kSponsorBlockUserID"] category:@"intro" withViewController:self];
         }]];
         
         [categoryActions addObject:[UIAction actionWithTitle:@"Outro" image:nil identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
@@ -299,7 +286,7 @@
                 [self setupViews];
                 return;
             }
-            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[settings objectForKey:@"userID"] category:@"outro" withViewController:self];
+            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[[NSUserDefaults standardUserDefaults] stringForKey:@"kSponsorBlockUserID"] category:@"outro" withViewController:self];
         }]];
         
         [categoryActions addObject:[UIAction actionWithTitle:@"Interaction Reminder (Subcribe/Like)" image:nil identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
@@ -308,7 +295,7 @@
                 [self setupViews];
                 return;
             }
-            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[settings objectForKey:@"userID"] category:@"interaction" withViewController:self];
+            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[[NSUserDefaults standardUserDefaults] stringForKey:@"kSponsorBlockUserID"] category:@"interaction" withViewController:self];
         }]];
         
         [categoryActions addObject:[UIAction actionWithTitle:@"Unpaid/Self Promotion" image:nil identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
@@ -317,7 +304,7 @@
                 [self setupViews];
                 return;
             }
-            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[settings objectForKey:@"userID"] category:@"selfpromo" withViewController:self];
+            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[[NSUserDefaults standardUserDefaults] stringForKey:@"kSponsorBlockUserID"] category:@"selfpromo" withViewController:self];
         }]];
         
         [categoryActions addObject:[UIAction actionWithTitle:@"Music: Non-Music Section" image:nil identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
@@ -326,7 +313,7 @@
                 [self setupViews];
                 return;
             }
-            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[settings objectForKey:@"userID"] category:@"music_offtopic" withViewController:self];
+            [SponsorBlockRequest categoryVoteForSegment:sponsorSegmentView.sponsorSegment userID:[[NSUserDefaults standardUserDefaults] stringForKey:@"kSponsorBlockUserID"] category:@"music_offtopic" withViewController:self];
         }]];
         NSMutableArray* actions = [NSMutableArray array];
         if (sponsorSegmentView.editable)
@@ -395,11 +382,11 @@
         }
         else {
             [actions addObject:[UIAction actionWithTitle:@"Upvote" image:[UIImage systemImageNamed:@"hand.thumbsup.fill"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
-                [SponsorBlockRequest normalVoteForSegment:sponsorSegmentView.sponsorSegment userID:[settings objectForKey:@"userID"] type:YES withViewController:self];
+                [SponsorBlockRequest normalVoteForSegment:sponsorSegmentView.sponsorSegment userID:[[NSUserDefaults standardUserDefaults] stringForKey:@"kSponsorBlockUserID"] type:YES withViewController:self];
             }]];
             
             [actions addObject:[UIAction actionWithTitle:@"Downvote" image:[UIImage systemImageNamed:@"hand.thumbsdown.fill"] identifier:nil handler:^(__kindof UIAction* _Nonnull action) {
-                [SponsorBlockRequest normalVoteForSegment:sponsorSegmentView.sponsorSegment userID:[settings objectForKey:@"userID"] type:NO withViewController:self];
+                [SponsorBlockRequest normalVoteForSegment:sponsorSegmentView.sponsorSegment userID:[[NSUserDefaults standardUserDefaults] stringForKey:@"kSponsorBlockUserID"] type:NO withViewController:self];
             }]];
             
             UIMenu *categoriesMenu = [UIMenu menuWithTitle:@"Vote to Change Cateogory" image:[UIImage systemImageNamed:@"square.grid.2x2"] identifier:nil options:0 children:categoryActions];
diff -urN iSponsorBlock/iSponsorBlock.xm iSponsorBlock+useNSUserDefaults/iSponsorBlock.xm
--- iSponsorBlock/iSponsorBlock.xm	2022-03-16 21:16:54.796059273 +0700
+++ iSponsorBlock+useNSUserDefaults/iSponsorBlock.xm	2022-03-17 05:48:56.828608609 +0700
@@ -760,51 +760,60 @@
 %end
 
 static void loadPrefs() {
-    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
-    NSString *documentsDirectory = [paths objectAtIndex:0];
-    NSString *path = [documentsDirectory stringByAppendingPathComponent:@"iSponsorBlock.plist"];
-    NSMutableDictionary *settings = [NSMutableDictionary dictionary];
-    [settings addEntriesFromDictionary:[NSDictionary dictionaryWithContentsOfFile:path]];
-    kIsEnabled = [settings objectForKey:@"enabled"] ? [[settings objectForKey:@"enabled"] boolValue] : YES;
-    kUserID = [settings objectForKey:@"userID"] ? [settings objectForKey:@"userID"] : [[NSUUID UUID] UUIDString];
-    kCategorySettings = [settings objectForKey:@"categorySettings"] ? [settings objectForKey:@"categorySettings"] : @{
-        @"sponsor" : @1,
-        @"sponsorColor" : hexFromUIColor(UIColor.greenColor),
-        @"intro" : @0,
-        @"introColor" : hexFromUIColor(UIColor.systemTealColor),
-        @"outro" : @0,
-        @"outroColor" : hexFromUIColor(UIColor.blueColor),
-        @"interaction" : @0,
-        @"interactionColor" : hexFromUIColor(UIColor.systemPinkColor),
-        @"selfpromo" : @0,
-        @"selfpromoColor" : hexFromUIColor(UIColor.yellowColor),
-        @"music_offtopic" : @0,
-        @"music_offtopicColor" : hexFromUIColor(UIColor.orangeColor)
-    };
-    kMinimumDuration = [settings objectForKey:@"minimumDuration"] ? [[settings objectForKey:@"minimumDuration"] floatValue] : 0.0f;
-    kShowSkipNotice = [settings objectForKey:@"showSkipNotice"] ? [[settings objectForKey:@"showSkipNotice"] boolValue] : YES;
-    kShowButtonsInPlayer = [settings objectForKey:@"showButtonsInPlayer"] ? [[settings objectForKey:@"showButtonsInPlayer"] boolValue] : YES;
-    kShowModifiedTime = [settings objectForKey:@"showModifiedTime"] ? [[settings objectForKey:@"showModifiedTime"] boolValue] : YES;
-    kEnableSkipCountTracking = [settings objectForKey:@"enableSkipCountTracking"] ? [[settings objectForKey:@"enableSkipCountTracking"] boolValue] : YES;
-    kSkipNoticeDuration = [settings objectForKey:@"skipNoticeDuration"] ? [[settings objectForKey:@"skipNoticeDuration"] floatValue] : 3.0f;
-    kWhitelistedChannels = [settings objectForKey:@"whitelistedChannels"] ? [(NSArray *)[settings objectForKey:@"whitelistedChannels"] mutableCopy] : [NSMutableArray array];
-    
-    NSDictionary *newSettings = @{
-      @"enabled" : @(kIsEnabled),
-      @"userID" : kUserID,
-      @"categorySettings" : kCategorySettings,
-      @"minimumDuration" : @(kMinimumDuration),
-      @"showSkipNotice" : @(kShowSkipNotice),
-      @"showButtonsInPlayer" : @(kShowButtonsInPlayer),
-      @"showModifiedTime" : @(kShowModifiedTime),
-      @"enableSkipCountTracking" : @(kEnableSkipCountTracking),
-      @"skipNoticeDuration" : @(kSkipNoticeDuration),
-      @"whitelistedChannels" : kWhitelistedChannels
-    };
-    if(![newSettings isEqualToDictionary:settings]) {
-        [newSettings writeToURL:[NSURL fileURLWithPath:path isDirectory:NO] error:nil];
-    }
-
+    kIsEnabled = [[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockEnabled"] 
+                    ? [[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockEnabled"] 
+                    : YES;
+    kUserID = [[NSUserDefaults standardUserDefaults] stringForKey:@"kSponsorBlockUserID"] 
+                ? [[NSUserDefaults standardUserDefaults] stringForKey:@"kSponsorBlockUserID"] 
+                : [[NSUUID UUID] UUIDString];
+    kCategorySettings = [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"kSponsorBlockCategorySettings"] 
+                            ? [[NSUserDefaults standardUserDefaults] dictionaryForKey:@"kSponsorBlockCategorySettings"] 
+                            : @{
+                                    @"sponsor" : @1,
+                                    @"sponsorColor" : hexFromUIColor(UIColor.greenColor),
+                                    @"intro" : @0,
+                                    @"introColor" : hexFromUIColor(UIColor.systemTealColor),
+                                    @"outro" : @0,
+                                    @"outroColor" : hexFromUIColor(UIColor.blueColor),
+                                    @"interaction" : @0,
+                                    @"interactionColor" : hexFromUIColor(UIColor.systemPinkColor),
+                                    @"selfpromo" : @0,
+                                    @"selfpromoColor" : hexFromUIColor(UIColor.yellowColor),
+                                    @"music_offtopic" : @0,
+                                    @"music_offtopicColor" : hexFromUIColor(UIColor.orangeColor)    
+                                };
+    kMinimumDuration = [[NSUserDefaults standardUserDefaults] floatForKey:@"kSponsorBlockMinimumDuration"] 
+                        ? [[NSUserDefaults standardUserDefaults] floatForKey:@"kSponsorBlockMinimumDuration"]
+                        : 0.0f;
+    kShowSkipNotice = [[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockShowSkipNotice"]
+                        ? [[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockShowSkipNotice"]
+                        : YES;
+    kShowButtonsInPlayer = [[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockShowButtonsInPlayer"]
+                            ? [[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockShowButtonsInPlayer"]
+                            : YES;
+    kShowModifiedTime = [[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockShowModifiedTime"]
+                            ? [[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockShowModifiedTime"]
+                            : YES;
+    kEnableSkipCountTracking = [[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockEnableSkipTimeTracking"]
+                                ? [[NSUserDefaults standardUserDefaults] boolForKey:@"kSponsorBlockEnableSkipTimeTracking"]
+                                : YES;
+    kSkipNoticeDuration = [[NSUserDefaults standardUserDefaults] floatForKey:@"kSponsorBlockSkipNoticeDuration"]
+                            ? [[NSUserDefaults standardUserDefaults] floatForKey:@"kSponsorBlockSkipNoticeDuration"]
+                            : 3.0f;
+    kWhitelistedChannels = [[NSUserDefaults standardUserDefaults] arrayForKey:@"kSponsorBlockWhitelistedChannels"]
+                            ? [[[NSUserDefaults standardUserDefaults] arrayForKey:@"kSponsorBlockWhitelistedChannels"] mutableCopy]
+                            : [NSMutableArray array];
+    [[NSUserDefaults standardUserDefaults] setBool:kIsEnabled forKey:@"kSponsorBlockEnabled"];
+    [[NSUserDefaults standardUserDefaults] setObject:kUserID forKey:@"kSponsorBlockUserID"];
+    [[NSUserDefaults standardUserDefaults] setObject:kCategorySettings forKey:@"kSponsorBlockCategorySettings"];
+    [[NSUserDefaults standardUserDefaults] setFloat:kMinimumDuration forKey:@"kSponsorBlockMinimumDuration"];
+    [[NSUserDefaults standardUserDefaults] setBool:kShowSkipNotice forKey:@"kSponsorBlockShowSkipNotice"];
+    [[NSUserDefaults standardUserDefaults] setBool:kShowButtonsInPlayer forKey:@"kSponsorBlockShowButtonsInPlayer"];
+    [[NSUserDefaults standardUserDefaults] setBool:kShowModifiedTime forKey:@"kSponsorBlockShowModifiedTime"];
+    [[NSUserDefaults standardUserDefaults] setBool:kEnableSkipCountTracking forKey:@"kSponsorBlockEnableSkipTimeTracking"];
+    [[NSUserDefaults standardUserDefaults] setFloat:kSkipNoticeDuration forKey:@"kSponsorBlockSkipNoticeDuration"];
+    [[NSUserDefaults standardUserDefaults] setObject:kWhitelistedChannels forKey:@"kSponsorBlockWhitelistedChannels"];
+    [[NSUserDefaults standardUserDefaults] synchronize];
 }
 
 static void prefsChanged(CFNotificationCenterRef center, void *observer, CFStringRef name, const void *object, CFDictionaryRef userInfo) {
