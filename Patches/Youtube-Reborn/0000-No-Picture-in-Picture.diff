diff -urN Youtube-Reborn/Controllers/PictureInPictureController.h Youtube-Reborn+NoPiP/Controllers/PictureInPictureController.h
--- Youtube-Reborn/Controllers/PictureInPictureController.h	2022-03-02 09:27:53.000000000 +0700
+++ Youtube-Reborn+NoPiP/Controllers/PictureInPictureController.h	1970-01-01 08:00:00.000000000 +0800
@@ -1,13 +0,0 @@
-#import <AVFoundation/AVFoundation.h>
-#import <AVKit/AVKit.h>
-#import <UIKit/UIKit.h>
-
-@interface PictureInPictureController : UIViewController <AVPlayerViewControllerDelegate, AVPictureInPictureControllerDelegate>
-
-@property (nonatomic, assign) NSString *videoTime;
-@property (nonatomic, assign) NSURL *videoPath;
-
-- (void)setupLightDarkModeVideoView;
-- (void)setupPictureInPicture;
-
-@end
\ No newline at end of file
diff -urN Youtube-Reborn/Controllers/PictureInPictureController.m Youtube-Reborn+NoPiP/Controllers/PictureInPictureController.m
--- Youtube-Reborn/Controllers/PictureInPictureController.m	2022-03-02 09:27:53.000000000 +0700
+++ Youtube-Reborn+NoPiP/Controllers/PictureInPictureController.m	1970-01-01 08:00:00.000000000 +0800
@@ -1,89 +0,0 @@
-#import "PictureInPictureController.h"
-
-@interface PictureInPictureController ()
-@end
-
-@implementation PictureInPictureController
-
-AVPlayer *player;
-AVPlayerLayer *playerLayer;
-AVPictureInPictureController *pictureInPictureController;
-
-- (void)loadView {
-	[super loadView];
-
-    [self.navigationController setNavigationBarHidden:YES animated:NO];
-
-    [self setupLightDarkModeVideoView];
-
-    AVPlayerItem *playerItem = [[AVPlayerItem alloc] initWithURL:self.videoPath];
-    player = [[AVPlayer alloc] initWithPlayerItem:playerItem];
-    float newTimeFloat = [self.videoTime floatValue];
-    CMTime newTime = CMTimeMakeWithSeconds(newTimeFloat, 1);
-    [player seekToTime:newTime];
-
-    [player addObserver:self forKeyPath:@"status" options:0 context:nil];
-    [player addObserver:self forKeyPath:@"timeControlStatus" options:0 context:nil];
-
-    playerLayer = [AVPlayerLayer playerLayerWithPlayer:player];
-    playerLayer.frame = CGRectMake(0, 0, self.view.bounds.size.width, self.view.bounds.size.width * 9 / 16);
-    playerLayer.hidden = YES;
-
-    [self.view.layer addSublayer:playerLayer];
-
-    UIButton *button = [UIButton buttonWithType:UIButtonTypeRoundedRect];
-    [button addTarget:self action:@selector(closePip) forControlEvents:UIControlEventTouchUpInside];
-    button.frame = self.view.bounds;
-    [button setTitle:@"Tap To Stop Picture-In-Picture" forState:UIControlStateNormal];
-    [self.view addSubview:button];
-}
-
-- (void)traitCollectionDidChange:(UITraitCollection *)previousTraitCollection {
-    [super traitCollectionDidChange:previousTraitCollection];
-    [self setupLightDarkModeVideoView];
-}
-
-@end
-
-@implementation PictureInPictureController(Privates)
-
-- (void)setupLightDarkModeVideoView {
-    if (self.traitCollection.userInterfaceStyle == UIUserInterfaceStyleLight) {
-        self.view.backgroundColor = [UIColor colorWithRed:0.949 green:0.949 blue:0.969 alpha:1.0];
-    }
-    else {
-        self.view.backgroundColor = [UIColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:1.0];
-    }
-}
-
-- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {
-    if (object == player && [keyPath isEqualToString:@"status"]) {
-        if (player.status == AVPlayerStatusReadyToPlay) {
-            [player play];
-            if([AVPictureInPictureController isPictureInPictureSupported]) {
-                pictureInPictureController = [[AVPictureInPictureController alloc] initWithPlayerLayer:playerLayer];
-                pictureInPictureController.delegate = self;
-                if ([pictureInPictureController respondsToSelector:@selector(setCanStartPictureInPictureAutomaticallyFromInline:)]) {
-                    pictureInPictureController.canStartPictureInPictureAutomaticallyFromInline = YES;
-                }
-            }
-        }
-    } else if (object == player && [keyPath isEqualToString:@"timeControlStatus"]) {
-        if (player.timeControlStatus == AVPlayerTimeControlStatusPlaying) {
-            if([AVPictureInPictureController isPictureInPictureSupported]) {
-                [pictureInPictureController startPictureInPicture];
-            }
-        }
-    }
-}
-
-- (void)closePip {
-    if ([pictureInPictureController isPictureInPictureActive]) {
-        [pictureInPictureController stopPictureInPicture];
-    }
-    [player pause];
-    [playerLayer removeFromSuperlayer];
-    [self.presentingViewController dismissViewControllerAnimated:YES completion:nil];
-}
-
-@end
\ No newline at end of file
diff -urN Youtube-Reborn/Controllers/RebornSettingsController.m Youtube-Reborn+NoPiP/Controllers/RebornSettingsController.m
--- Youtube-Reborn/Controllers/RebornSettingsController.m	2022-03-02 09:27:53.000000000 +0700
+++ Youtube-Reborn+NoPiP/Controllers/RebornSettingsController.m	2022-03-11 13:22:04.396778292 +0700
@@ -39,7 +39,7 @@
         return 1;
     }
     if (section == 1) {
-        return 3;
+        return 2;
     }
     return 0;
 }
@@ -75,14 +75,6 @@
                 cell.accessoryView = hideRebornDWNButton;
             }
             if(indexPath.row == 1) {
-                cell.textLabel.text = @"Hide Overlay 'PIP' Button";
-                cell.selectionStyle = UITableViewCellSelectionStyleNone;
-                UISwitch *hideRebornPIPButton = [[UISwitch alloc] initWithFrame:CGRectZero];
-                [hideRebornPIPButton addTarget:self action:@selector(toggleHideRebornPIPButton:) forControlEvents:UIControlEventValueChanged];
-                hideRebornPIPButton.on = [[NSUserDefaults standardUserDefaults] boolForKey:@"kHideRebornPIPButton"];
-                cell.accessoryView = hideRebornPIPButton;
-            }
-            if(indexPath.row == 2) {
                 cell.textLabel.text = @"Hide Overlay 'OP' Button";
                 cell.selectionStyle = UITableViewCellSelectionStyleNone;
                 UISwitch *hideRebornOPButton = [[UISwitch alloc] initWithFrame:CGRectZero];
@@ -146,16 +138,6 @@
     }
 }
 
-- (void)toggleHideRebornPIPButton:(UISwitch *)sender {
-    if ([sender isOn]) {
-        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"kHideRebornPIPButton"];
-        [[NSUserDefaults standardUserDefaults] synchronize];
-    } else {
-        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@"kHideRebornPIPButton"];
-        [[NSUserDefaults standardUserDefaults] synchronize];
-    }
-}
-
 - (void)toggleHideRebornOPButton:(UISwitch *)sender {
     if ([sender isOn]) {
         [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"kHideRebornOPButton"];
@@ -166,4 +148,4 @@
     }
 }
 
-@end
\ No newline at end of file
+@end
diff -urN Youtube-Reborn/Tweak.h Youtube-Reborn+NoPiP/Tweak.h
--- Youtube-Reborn/Tweak.h	2022-03-02 09:27:53.000000000 +0700
+++ Youtube-Reborn+NoPiP/Tweak.h	2022-03-11 12:48:28.681375737 +0700
@@ -80,9 +80,7 @@
 // Tweak Variables
 
 extern NSMutableArray *overlayButtons;
-extern NSString *pipTime;
-extern NSURL *pipURL;
 
 // YouTube Api Variables
 
-extern NSString *YTApiKey;
\ No newline at end of file
+extern NSString *YTApiKey;
diff -urN Youtube-Reborn/Tweak.xm Youtube-Reborn+NoPiP/Tweak.xm
--- Youtube-Reborn/Tweak.xm	2022-03-02 09:27:53.000000000 +0700
+++ Youtube-Reborn+NoPiP/Tweak.xm	2022-03-11 12:57:59.137603044 +0700
@@ -1,10 +1,10 @@
 #import <Foundation/Foundation.h>
 #import <UIKit/UIKit.h>
+#import <AVFoundation/AVFoundation.h>
 #import <XCDYouTubeKit/XCDYouTubeKit.h>
 #import <AFNetworking/AFNetworking.h>
 #import <MediaRemote/MediaRemote.h>
 #import "Controllers/RootOptionsController.h"
-#import "Controllers/PictureInPictureController.h"
 #import "DTTJailbreakDetection/DTTJailbreakDetection.h"
 #import "Tweak.h"
 
@@ -148,8 +148,6 @@
 %end
 
 NSMutableArray *overlayButtons = [NSMutableArray array];
-NSString *pipTime;
-NSURL *pipURL;
 
 %hook YTMainAppControlsOverlayView
 
@@ -163,9 +161,6 @@
         if ([[NSUserDefaults standardUserDefaults] boolForKey:@"kHideRebornDWNButton"] == NO) {
             [overlayButtons addObject:@"DWN"];
         }
-        if ([[NSUserDefaults standardUserDefaults] boolForKey:@"kHideRebornPIPButton"] == NO) {
-            [overlayButtons addObject:@"PIP"];
-        }
         if ([[NSUserDefaults standardUserDefaults] boolForKey:@"kHideRebornOPButton"] == NO) {
             [overlayButtons addObject:@"OP"];
         }
@@ -175,9 +170,6 @@
             if ([overlayButtons[0] isEqual:@"DWN"]) {
                 [self.overlayButtonOne addTarget:self action:@selector(optionsAction:) forControlEvents:UIControlEventTouchUpInside];
             }
-            if ([overlayButtons[0] isEqual:@"PIP"]) {
-                [self.overlayButtonOne addTarget:self action:@selector(pictureInPicture) forControlEvents:UIControlEventTouchUpInside];
-            }
             if ([overlayButtons[0] isEqual:@"OP"]) {
                 [self.overlayButtonOne addTarget:self action:@selector(playInApp) forControlEvents:UIControlEventTouchUpInside];
             }
@@ -199,18 +191,12 @@
             if ([overlayButtons[0] isEqual:@"DWN"]) {
                 [self.overlayButtonOne addTarget:self action:@selector(optionsAction:) forControlEvents:UIControlEventTouchUpInside];
             }
-            if ([overlayButtons[0] isEqual:@"PIP"]) {
-                [self.overlayButtonOne addTarget:self action:@selector(pictureInPicture) forControlEvents:UIControlEventTouchUpInside];
-            }
             if ([overlayButtons[0] isEqual:@"OP"]) {
                 [self.overlayButtonOne addTarget:self action:@selector(playInApp) forControlEvents:UIControlEventTouchUpInside];
             }
             if ([overlayButtons[1] isEqual:@"DWN"]) {
                 [self.overlayButtonTwo addTarget:self action:@selector(optionsAction:) forControlEvents:UIControlEventTouchUpInside];
             }
-            if ([overlayButtons[1] isEqual:@"PIP"]) {
-                [self.overlayButtonTwo addTarget:self action:@selector(pictureInPicture) forControlEvents:UIControlEventTouchUpInside];
-            }
             if ([overlayButtons[1] isEqual:@"OP"]) {
                 [self.overlayButtonTwo addTarget:self action:@selector(playInApp) forControlEvents:UIControlEventTouchUpInside];
             }
@@ -238,27 +224,18 @@
             if ([overlayButtons[0] isEqual:@"DWN"]) {
                 [self.overlayButtonOne addTarget:self action:@selector(optionsAction:) forControlEvents:UIControlEventTouchUpInside];
             }
-            if ([overlayButtons[0] isEqual:@"PIP"]) {
-                [self.overlayButtonOne addTarget:self action:@selector(pictureInPicture) forControlEvents:UIControlEventTouchUpInside];
-            }
             if ([overlayButtons[0] isEqual:@"OP"]) {
                 [self.overlayButtonOne addTarget:self action:@selector(playInApp) forControlEvents:UIControlEventTouchUpInside];
             }
             if ([overlayButtons[1] isEqual:@"DWN"]) {
                 [self.overlayButtonTwo addTarget:self action:@selector(optionsAction:) forControlEvents:UIControlEventTouchUpInside];
             }
-            if ([overlayButtons[1] isEqual:@"PIP"]) {
-                [self.overlayButtonTwo addTarget:self action:@selector(pictureInPicture) forControlEvents:UIControlEventTouchUpInside];
-            }
             if ([overlayButtons[1] isEqual:@"OP"]) {
                 [self.overlayButtonTwo addTarget:self action:@selector(playInApp) forControlEvents:UIControlEventTouchUpInside];
             }
             if ([overlayButtons[2] isEqual:@"DWN"]) {
                 [self.overlayButtonThree addTarget:self action:@selector(optionsAction:) forControlEvents:UIControlEventTouchUpInside];
             }
-            if ([overlayButtons[2] isEqual:@"PIP"]) {
-                [self.overlayButtonThree addTarget:self action:@selector(pictureInPicture) forControlEvents:UIControlEventTouchUpInside];
-            }
             if ([overlayButtons[2] isEqual:@"OP"]) {
                 [self.overlayButtonThree addTarget:self action:@selector(playInApp) forControlEvents:UIControlEventTouchUpInside];
             }
@@ -655,62 +632,6 @@
         }
     }];
 }
-
-%new;
-- (void)pictureInPicture {
-    NSInteger videoStatus = [stateOut playerState];
-    if (videoStatus == 3) {
-        MRMediaRemoteSendCommand(MRMediaRemoteCommandPause, 0);
-    }
-    
-    XCDYouTubeClient.innertubeApiKey = YTApiKey;
-
-    NSString *videoIdentifier = [playingVideoID currentVideoID];
-
-    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"kEnableBackgroundPlayback"] == YES) {
-        [[XCDYouTubeClient defaultClient] getVideoWithIdentifier:videoIdentifier completionHandler:^(XCDYouTubeVideo *video, NSError *error) {
-            if (video) {
-                NSDictionary *streamURLs = video.streamURLs;
-                pipTime = [NSString stringWithFormat:@"%f", [resultOut mediaTime]];
-                pipURL = streamURLs[XCDYouTubeVideoQualityHTTPLiveStreaming];
-                if (pipURL != NULL) {
-                    PictureInPictureController *pictureInPictureController = [[PictureInPictureController alloc] init];
-                    pictureInPictureController.videoTime = pipTime;
-                    pictureInPictureController.videoPath = pipURL;
-                    UINavigationController *pictureInPictureControllerView = [[UINavigationController alloc] initWithRootViewController:pictureInPictureController];
-                    pictureInPictureControllerView.modalPresentationStyle = UIModalPresentationFullScreen;
-
-                    UIViewController *pictureInPictureViewController = self._viewControllerForAncestor;
-                    [pictureInPictureViewController presentViewController:pictureInPictureControllerView animated:YES completion:nil];
-                } else {
-                    UIAlertController *alertPip = [UIAlertController alertControllerWithTitle:@"Notice" message:@"This video is not supported by the Picture-In-Picture" preferredStyle:UIAlertControllerStyleAlert];
-
-                    [alertPip addAction:[UIAlertAction actionWithTitle:@"Okay" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
-                    }]];
-
-                    UIViewController *pipViewController = self._viewControllerForAncestor;
-                    [pipViewController presentViewController:alertPip animated:YES completion:nil];
-                }
-            } else {
-                UIAlertController *alertPip = [UIAlertController alertControllerWithTitle:@"Notice" message:@"Unable to fetch youtube video url from googles api" preferredStyle:UIAlertControllerStyleAlert];
-
-                [alertPip addAction:[UIAlertAction actionWithTitle:@"Okay" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
-                }]];
-
-                UIViewController *pipViewController = self._viewControllerForAncestor;
-                [pipViewController presentViewController:alertPip animated:YES completion:nil];
-            }
-        }];
-    } else {
-        UIAlertController *alertPip = [UIAlertController alertControllerWithTitle:@"Notice" message:@"You must enable 'Background Playback' in YouTube Reborn settings to use Picture-In-Picture" preferredStyle:UIAlertControllerStyleAlert];
-
-        [alertPip addAction:[UIAlertAction actionWithTitle:@"Okay" style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
-        }]];
-
-        UIViewController *pipViewController = self._viewControllerForAncestor;
-        [pipViewController presentViewController:alertPip animated:YES completion:nil];
-    }
-}
 %end
 
 %group gNoVideoAds
@@ -1842,4 +1763,4 @@
         }
         %init(_ungrouped);
     }
-}
\ No newline at end of file
+}
